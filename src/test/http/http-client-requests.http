### Image Store API - HTTP Client Requests

### OpenAPI Documentation

### 1a. Get OpenAPI Specification (JSON)
GET {{baseUrl}}/v3/api-docs

###

### 1b. Get OpenAPI Specification (YAML)
GET {{baseUrl}}/v3/api-docs.yaml

###

### 1c. Open Swagger UI
GET {{baseUrl}}/swagger-ui.html

###

### 1. Health Check
GET {{baseUrl}}/api/health

###

### 2. Upload Image (no tags)
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test-image.jpg"
Content-Type: image/jpeg

< {{testImagePath}}
--WebAppBoundary--

> {%
    client.test("Upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
    client.global.set("uploadedImageId", response.body.id);
%}

###

### 3. Upload Image with Tags
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="landscape.jpg"
Content-Type: image/jpeg

< {{testImagePath}}
--WebAppBoundary
Content-Disposition: form-data; name="tags"

nature
--WebAppBoundary
Content-Disposition: form-data; name="tags"

landscape
--WebAppBoundary
Content-Disposition: form-data; name="tags"

sunset
--WebAppBoundary--

> {%
    client.test("Upload with tags successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.tags.length === 3, "Should have 3 tags");
    });
    client.global.set("taggedImageId", response.body.id);
%}

###

### 4. Get Image by ID
GET {{baseUrl}}/api/images/{{imageId}}
Accept: image/*

> {%
    client.test("Image retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.headers.valueOf("ETag") !== null, "ETag header missing");
        client.assert(response.headers.valueOf("Cache-Control") !== null, "Cache-Control header missing");
    });
%}

###

### 5. Get Image with ETag (should return 304)
GET {{baseUrl}}/api/images/{{imageId}}
Accept: image/*
If-None-Match: "d41d8cd98f00b204e9800998ecf8427e"

###

### 6. Get Image Metadata
GET {{baseUrl}}/api/images/{{imageId}}/metadata

> {%
    client.test("Metadata retrieved", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.id !== undefined, "ID missing");
        client.assert(response.body.filename !== undefined, "Filename missing");
    });
%}

###

### 7. Search Images - Required Tags
GET {{baseUrl}}/api/images/search?required=parrot

> {%
    client.test("Search successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body), "Response should be an array");
    });
%}

###

### 8. Search Images - Optional Tags
GET {{baseUrl}}/api/images/search?optional=nature,landscape,sunset

###

### 9. Search Images - Required and Optional Tags
GET {{baseUrl}}/api/images/search?required=nature&optional=sunset,mountains

###

### 10. Search Images - With Forbidden Tags
GET {{baseUrl}}/api/images/search?required=nature&forbidden=urban,city

###

### 11. Search Images - Complex Query
GET {{baseUrl}}/api/images/search?required=nature,landscape&optional=sunset,mountains&forbidden=urban

###

### 12. Get Non-Existent Image (should return 404)
GET {{baseUrl}}/api/images/99999

> {%
    client.test("Not found", function() {
        client.assert(response.status === 404, "Response status is not 404");
        client.assert(response.body.status === 404, "Error status incorrect");
        client.assert(response.body.error === "Not Found", "Error type incorrect");
    });
%}

###

### 13. Upload Empty File (should return 400)
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="empty.jpg"
Content-Type: image/jpeg


--WebAppBoundary--

> {%
    client.test("Empty file rejected", function() {
        client.assert(response.status === 400, "Response status is not 400");
        client.assert(response.body.message === "File cannot be empty", "Error message incorrect");
    });
%}

###

### 14. Upload Non-Image File (should return 400)
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="document.pdf"
Content-Type: application/pdf

This is a PDF file
--WebAppBoundary--

> {%
    client.test("Non-image rejected", function() {
        client.assert(response.status === 400, "Response status is not 400");
    });
%}

###

### 15. Upload PNG Image
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test.png"
Content-Type: image/png

< {{testImagePath}}
--WebAppBoundary--

###

### 16. Upload WebP Image
POST {{baseUrl}}/api/images
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test.webp"
Content-Type: image/webp

< {{testImagePath}}
--WebAppBoundary--

###

### 17. Delete Image
DELETE {{baseUrl}}/api/images/{{imageId}}

> {%
    client.test("Image deleted", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

###

### 18. Verify Deleted Image Returns 404
GET {{baseUrl}}/api/images/{{imageId}}

> {%
    client.test("Deleted image not found", function() {
        client.assert(response.status === 404, "Response status is not 404");
    });
%}

###

### =================================================================
### AUTHENTICATION & AUTHORIZATION (when security enabled)
### =================================================================
### Note: Set imagestore.security.enabled=true in application.yml
### On first startup, an admin API key will be auto-generated
### Copy that key and set it in the http-client.env.json file

### 19. Create API Key (requires ADMIN permission)
POST {{baseUrl}}/api/admin/keys
Authorization: Bearer {{adminApiKey}}
Content-Type: application/json

{
  "name": "Upload Service Key",
  "permissions": ["UPLOAD", "SEARCH", "GENERATE_SIGNED_URL"]
}

> {%
    client.test("API key created", function() {
        client.assert(response.status === 201, "Response status is not 201");
        client.assert(response.body.key !== undefined, "API key missing");
    });
    client.global.set("uploadApiKey", response.body.key);
%}

###

### 20. List API Keys (requires ADMIN permission)
GET {{baseUrl}}/api/admin/keys
Authorization: Bearer {{adminApiKey}}

> {%
    client.test("API keys listed", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(Array.isArray(response.body), "Response should be an array");
    });
%}

###

### 21. Upload Image with API Key
POST {{baseUrl}}/api/images
Authorization: Bearer {{uploadApiKey}}
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="secure-image.jpg"
Content-Type: image/jpeg

< {{testImagePath}}
--WebAppBoundary
Content-Disposition: form-data; name="tags"

secure
--WebAppBoundary--

> {%
    client.test("Authenticated upload successful", function() {
        client.assert(response.status === 201, "Response status is not 201");
    });
    client.global.set("secureImageId", response.body.id);
%}

###

### 22. Generate Signed URL (requires GENERATE_SIGNED_URL permission)
POST {{baseUrl}}/api/images/{{secureImageId}}/sign
Authorization: Bearer {{uploadApiKey}}
Content-Type: application/json

{
  "expiresIn": 3600
}

> {%
    client.test("Signed URL generated", function() {
        client.assert(response.status === 200, "Response status is not 200");
        client.assert(response.body.url !== undefined, "Signed URL missing");
    });
    // Extract signature and expires from URL
    const url = response.body.url;
    const params = new URLSearchParams(url.split('?')[1]);
    client.global.set("signedSignature", params.get('signature'));
    client.global.set("signedExpires", params.get('expires'));
%}

###

### 23. Access Image with Signed URL (no auth required)
GET {{baseUrl}}/api/images/{{secureImageId}}?signature={{signedSignature}}&expires={{signedExpires}}
Accept: image/*

> {%
    client.test("Signed URL access successful", function() {
        client.assert(response.status === 200, "Response status is not 200");
    });
%}

###

### 24. Access Image without Authentication (should fail if security enabled)
GET {{baseUrl}}/api/images/{{secureImageId}}
Accept: image/*

> {%
    client.test("Unauthenticated access denied", function() {
        client.assert(response.status === 403, "Response status is not 403");
    });
%}

###

### 25. Upload without Permission (should fail)
POST {{baseUrl}}/api/images
Authorization: Bearer invalid-key-12345
Content-Type: multipart/form-data; boundary=WebAppBoundary

--WebAppBoundary
Content-Disposition: form-data; name="file"; filename="test.jpg"
Content-Type: image/jpeg

< {{testImagePath}}
--WebAppBoundary--

> {%
    client.test("Invalid key rejected", function() {
        client.assert(response.status === 403, "Response status is not 403");
    });
%}

###

### 26. Revoke API Key (requires ADMIN permission)
DELETE {{baseUrl}}/api/admin/keys/{{keyIdToRevoke}}
Authorization: Bearer {{adminApiKey}}

> {%
    client.test("API key revoked", function() {
        client.assert(response.status === 204, "Response status is not 204");
    });
%}

###
